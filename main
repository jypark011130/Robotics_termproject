import time
import math
import numpy as np

from centroid_module_gpt import get_color_centroids_once
from InverseMaster import theta_calculator, a2, a3, a4, d1, d5, d6
from moving_robot_org import rad2pulse
from motorLLC_Protocol_TP_GPT import motorLLC

# ────────────────────────────────────────────────────────────────
# CONSTANTS & PARAMETERS
# ────────────────────────────────────────────────────────────────
START_DEG            = [0, 0, 0, 0, 0, 0, 30]   # home pose, gripper fully open
COLORS_EXEC_ORDER    = ["RED", "GREEN", "BLUE"]  # pick sequence

# Heights (mm)
PICK_Z_ABOVE         = 100     # height above block before descent
PICK_DESCENT         = 15     # descent during grasping → z = PICK_Z_ABOVE - PICK_DESCENT
PLACE_Z_ABOVE        = 100     # height above placement coordinate before descent
PLACE_DESCENT        = 20     # descent for drop → z = PLACE_Z_ABOVE - PLACE_DESCENT

# Gripper angles (deg)
GRIP_OPEN_DEG        = 30
GRIP_CLOSE_DEG       = -11

# Default joint velocity for every movement (pulse/s)
VEL_DEFAULT          = 100

# Pre‑defined placement XY (mm)
PLACE_POSITIONS = {
    "RED":   (200.0,  100.0),
    "GREEN": (200.0, -100.0),
    "BLUE":  (300.0,    0.0),
}

# ────────────────────────────────────────────────────────────────
# HELPER FUNCTIONS
# ────────────────────────────────────────────────────────────────

def make_target_T(x_mm: float, y_mm: float, z_mm: float) -> np.ndarray:
    """Return 4×4 end‑effector pose matrix (fixed orientation)."""
    R = np.array([[ 0,  0,  1],
                  [-1,  0,  0],
                  [ 0, -1,  0]])
    T = np.eye(4)
    T[:3, :3] = R
    T[:3, 3]  = [x_mm, y_mm, z_mm]
    return T


def deg_list_to_rad(lst_deg):
    return [math.radians(d) for d in lst_deg]


def move_joints(motor: motorLLC, rad_list: list[float], vel: int = VEL_DEFAULT):
    """Convert radian angles to pulses and send synchronous move."""
    pulses = [rad2pulse(theta) for theta in rad_list]
    motor.moveTo(pulses, [vel] * len(pulses))

# For debug───────────────────────────────────────────────────────
def compute_distance_from_base(x_mm: float, y_mm: float, z_mm: float) -> float:
    """로봇 베이스(0,0,0)로부터 목표 지점까지의 유클리드 거리(mm) 계산."""
    return math.sqrt(x_mm**2 + y_mm**2 + z_mm**2)

def rad_list_to_deg_list(rad_list: list[float]) -> list[float]:
    """라디안 리스트를 도 단위 리스트로 변환하여 반환."""
    return [math.degrees(r) for r in rad_list]
# ────────────────────────────────────────────────────────────────


# ────────────────────────────────────────────────────────────────
# MAIN ROUTINE
# ────────────────────────────────────────────────────────────────

def main():
    motor = motorLLC()
    motor.open()
    motor.torque_enable()

    # 1️⃣  Move to home pose --------------------------------------------------
    home_rad = deg_list_to_rad(START_DEG)
    print(">>> 초기 홈 포즈로 이동:")
    print(f"    START_DEG (deg)   : {START_DEG}")
    print(f"    START_RAD (rad)   : {[round(r, 3) for r in home_rad]}")
    move_joints(motor, home_rad)
    time.sleep(2)

    # 2️⃣  Acquire centroids (mm) --------------------------------------------
    r_info, g_info, b_info = get_color_centroids_once(camera_index=1, timeout_sec=5, debug=False)
    if not (r_info and g_info and b_info):
        print("[ERROR] One or more colors not detected – aborting.")
        motor.close()
        return

    def xy_from(info):
        return info[2], info[3]  # X_mm, Y_mm

    centroids = {
        "RED":   xy_from(r_info),
        "GREEN": xy_from(g_info),
        "BLUE":  xy_from(b_info),
    }

    # 획득된 centroids 좌표 출력
    print("\n>>> 획득된 블록 중심 좌표(로봇 기준, mm):")
    for color, (cx, cy) in centroids.items():
        print(f"    {color}: X = {cx:.1f} mm, Y = {cy:.1f} mm")

    # 3️⃣  Iterate through colors --------------------------------------------
    for color in COLORS_EXEC_ORDER:
        print(f"\n=== {color}: pick sequence start ===")
        cx, cy = centroids[color]

        # 3‑A  Move over block (z = PICK_Z_ABOVE) -----------------------------
        z_above = PICK_Z_ABOVE
        distance_above = compute_distance_from_base(cx, cy, z_above)
        T_above = make_target_T(cx, cy, PICK_Z_ABOVE)
        j_above = theta_calculator(T_above, a2, a3, a4, d1, d5, d6)
        j_above_deg = rad_list_to_deg_list(j_above)
        print("\n[3-A] 블록 상공으로 이동 (Above):")
        print(f"    Target (X, Y, Z)  : ({cx:.1f}, {cy:.1f}, {z_above:.1f}) mm")
        print(f"    Base로부터 거리    : {distance_above:.1f} mm")
        print(f"    계산된 관절 각도  : {['{:.1f}°'.format(d) for d in j_above_deg]} (관절1~6)")
        print(f"    그리퍼 각도 (deg) : {GRIP_OPEN_DEG}° (열림)")
        pose_above_open = list(j_above) + [math.radians(GRIP_OPEN_DEG)]
        move_joints(motor, pose_above_open)
        time.sleep(2)

        # 3‑B  Descend to grasp (z = PICK_Z_ABOVE – PICK_DESCENT) -------------
        z_pick = PICK_Z_ABOVE - PICK_DESCENT
        distance_pick = compute_distance_from_base(cx, cy, z_pick)
        T_pick = make_target_T(cx, cy, z_pick)
        j_pick = theta_calculator(T_pick, a2, a3, a4, d1, d5, d6)
        j_pick_deg = rad_list_to_deg_list(j_pick)
        print("\n[3-B] 블록 집기 전 하강 (Pick):")
        print(f"    Target (X, Y, Z)  : ({cx:.1f}, {cy:.1f}, {z_pick:.1f}) mm")
        print(f"    Base로부터 거리    : {distance_pick:.1f} mm")
        print(f"    계산된 관절 각도  : {['{:.1f}°'.format(d) for d in j_pick_deg]} (관절1~6)")
        print(f"    그리퍼 각도 (deg) : {GRIP_OPEN_DEG}° (열림)")
        pose_pick_open = list(j_pick) + [math.radians(GRIP_OPEN_DEG)]
        move_joints(motor, pose_pick_open)
        time.sleep(1)

        # 3‑C  Close gripper ---------------------------------------------------
        print("\n[3-C] 그리퍼 닫기 (Close Gripper):")
        print(f"    현재 관절 각도   : {['{:.1f}°'.format(d) for d in j_pick_deg]} (관절1~6)")
        print(f"    그리퍼 각도 (deg): {GRIP_CLOSE_DEG}° (닫힘)")
        pose_pick_closed = list(j_pick) + [math.radians(GRIP_CLOSE_DEG)]
        move_joints(motor, pose_pick_closed)
        time.sleep(1)

        # 3‑D  Lift back to above (reuse IK) ----------------------------------
        distance_lift = distance_above  # 3-A 때 이미 계산해둔 거리와 동일
        print("\n[3-D] 블록 잡은 채 상공으로 상승 (Lift):")
        print(f"    Target (X, Y, Z)  : ({cx:.1f}, {cy:.1f}, {z_above:.1f}) mm")
        print(f"    Base로부터 거리    : {distance_lift:.1f} mm")
        print(f"    계산된 관절 각도  : {['{:.1f}°'.format(d) for d in j_above_deg]} (관절1~6)")
        print(f"    그리퍼 각도 (deg) : {GRIP_CLOSE_DEG}° (닫힘 유지)")
        pose_lift_closed = list(j_above) + [math.radians(GRIP_CLOSE_DEG)]
        move_joints(motor, pose_lift_closed)
        time.sleep(2)

        # 3‑E  Move to placement above ---------------------------------------
        px, py = PLACE_POSITIONS[color]
        z_place_above = PLACE_Z_ABOVE
        distance_place_above = compute_distance_from_base(px, py, z_place_above)
        T_place_above = make_target_T(px, py, PLACE_Z_ABOVE)
        j_place_above = theta_calculator(T_place_above, a2, a3, a4, d1, d5, d6)
        j_place_above_deg = rad_list_to_deg_list(j_place_above)
        print("\n[3-E] 지정 위치 상공으로 이동 (Place Above):")
        print(f"    Target (X, Y, Z)  : ({px:.1f}, {py:.1f}, {z_place_above:.1f}) mm")
        print(f"    Base로부터 거리    : {distance_place_above:.1f} mm")
        print(f"    계산된 관절 각도  : {['{:.1f}°'.format(d) for d in j_place_above_deg]} (관절1~6)")
        print(f"    그리퍼 각도 (deg) : {GRIP_CLOSE_DEG}° (잡은 상태)")
        pose_place_above_closed = list(j_place_above) + [math.radians(GRIP_CLOSE_DEG)]
        move_joints(motor, pose_place_above_closed)
        time.sleep(2)

        # 3‑F  Descend for release -------------------------------------------
        z_release = PLACE_Z_ABOVE - PLACE_DESCENT
        distance_release = compute_distance_from_base(px, py, z_release)
        T_place = make_target_T(px, py, z_release)
        j_place = theta_calculator(T_place, a2, a3, a4, d1, d5, d6)
        j_place_deg = rad_list_to_deg_list(j_place)
        print("\n[3-F] 물체 놓기 전 하강 (Release):")
        print(f"    Target (X, Y, Z)  : ({px:.1f}, {py:.1f}, {z_release:.1f}) mm")
        print(f"    Base로부터 거리    : {distance_release:.1f} mm")
        print(f"    계산된 관절 각도  : {['{:.1f}°'.format(d) for d in j_place_deg]} (관절1~6)")
        print(f"    그리퍼 각도 (deg) : {GRIP_CLOSE_DEG}° (잡은 상태)")
        pose_place_closed = list(j_place) + [math.radians(GRIP_CLOSE_DEG)]
        move_joints(motor, pose_place_closed)
        time.sleep(1)

        # 3‑G  Open gripper ----------------------------------------------------
        print("\n[3-G] 그리퍼 열기 (Open Gripper) - 물체 내려놓음:")
        print(f"    현재 관절 각도   : {['{:.1f}°'.format(d) for d in j_place_deg]} (관절1~6)")
        print(f"    그리퍼 각도 (deg): {GRIP_OPEN_DEG}° (열림)")
        pose_place_open = list(j_place) + [math.radians(GRIP_OPEN_DEG)]
        move_joints(motor, pose_place_open)
        time.sleep(1)

        # 3‑H  Return to place‑above height -----------------------------------
        distance_place_lift = distance_place_above  # 3-E 때 계산해둔 값과 동일
        print("\n[3-H] 빈 그리퍼 상태로 상공으로 상승 (Lift Empty Gripper):")
        print(f"    Target (X, Y, Z)  : ({px:.1f}, {py:.1f}, {z_place_above:.1f}) mm")
        print(f"    Base로부터 거리    : {distance_place_lift:.1f} mm")
        print(f"    계산된 관절 각도  : {['{:.1f}°'.format(d) for d in j_place_above_deg]} (관절1~6)")
        print(f"    그리퍼 각도 (deg) : {GRIP_OPEN_DEG}° (열림 유지)")
        pose_place_lift = list(j_place_above) + [math.radians(GRIP_OPEN_DEG)]
        move_joints(motor, pose_place_lift)
        time.sleep(2)

        print(f"=== {color}: completed ===")

    # 4️⃣  Finish – back to home ---------------------------------------------
    print("\n>>> 모든 색상 작업 완료 후 홈 포즈로 복귀:")
    print(f"    START_DEG (deg)   : {START_DEG}")
    print(f"    START_RAD (rad)   : {[round(r, 3) for r in home_rad]}")
    move_joints(motor, home_rad)
    time.sleep(2)

    motor.close()
    print("All tasks finished – robot at home position.")


if __name__ == "__main__":
    main()
